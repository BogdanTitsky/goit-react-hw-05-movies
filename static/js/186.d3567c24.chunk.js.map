{"version":3,"file":"static/js/186.d3567c24.chunk.js","mappings":"kTAEMA,EAAM,mCACNC,EAAYC,EAAAA,EAAAA,OAAa,CAC7BC,QAAS,kCAGEC,EAAS,mCAAG,oGACAH,EAAUI,IAAI,mBAAoB,CACvDC,OAAQ,CAAEC,QAASP,KAFE,cACjBQ,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,qDAOTC,EAAa,mCAAG,WAAMC,GAAN,uFACJV,EAAUI,IAAV,gBAAuBM,GAAM,CAClDL,OAAQ,CAAEC,QAASP,KAFM,cACrBQ,EADqB,yBAKpBA,GALoB,2CAAH,sDAQbI,EAAW,mCAAG,WAAMD,GAAN,uFACFV,EAAUI,IAAV,gBAAuBM,EAAvB,YAAqC,CAC1DL,OAAQ,CAAEC,QAASP,KAFI,cACnBQ,EADmB,yBAKlBA,GALkB,2CAAH,sDAQXK,EAAc,mCAAG,WAAMF,GAAN,uFACLV,EAAUI,IAAV,gBAAuBM,EAAvB,YAAqC,CAC1DL,OAAQ,CAAEC,QAASP,KAFO,cACtBQ,EADsB,yBAKrBA,GALqB,2CAAH,sDAQdM,EAAgB,mCAAG,WAAMC,GAAN,uFACPd,EAAUI,IAAI,eAAgB,CACnDC,OAAQ,CAAEC,QAASP,EAAKe,MAAAA,KAFI,cACxBP,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,qD,wHCe7B,UAhDgB,WACd,OAA8BO,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQX,GAAOY,EAAAA,EAAAA,MAAPZ,GAkBR,OAhBAa,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,8GAEGZ,EAAAA,EAAAA,IAAeF,GAFlB,OAEdH,EAFc,OAGpBU,EAAWV,EAASC,KAAKiB,SACzBN,GAAa,GACRZ,EAASC,KAAKiB,SACjBJ,GAAS,GANS,gDASpBK,QAAQC,IAAR,MAToB,yDAAH,qDAYrBH,GACD,GAAE,CAACd,KAGF,gCACGQ,IAAa,SAAC,IAAD,IACbE,IAAS,uBAAG,+BACZJ,IACC,8BACGA,EAAQY,OAAS,GAChB,wBACGZ,EAAQa,KAAI,SAAAC,GACX,OACE,2BACE,0BAAI,UAAQA,EAAOC,WACnB,uBAAID,EAAOE,YAFJF,EAAOpB,GAKnB,OAGH,uBAAG,kDAMd,C","sources":["API.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '183c3cacc9c38c09c14d38798ccfe9d7';\nconst moviesApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const getMovies = async () => {\n  const response = await moviesApi.get('trending/all/day', {\n    params: { api_key: KEY },\n  });\n  return response.data;\n};\n\nexport const getMoviesById = async id => {\n  const response = await moviesApi.get(`movie/${id}`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getCastById = async id => {\n  const response = await moviesApi.get(`movie/${id}/credits`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getReviewsById = async id => {\n  const response = await moviesApi.get(`movie/${id}/reviews`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getSearhedMovies = async query => {\n  const response = await moviesApi.get('search/movie', {\n    params: { api_key: KEY, query },\n  });\n  return response.data;\n};\n\n//https://api.themoviedb.org/3/search/movie?query=batman\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getReviewsById } from 'API';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const getCurrentMovie = async () => {\n      try {\n        const response = await getReviewsById(id);\n        setReviews(response.data.results);\n        setIsLoading(false);\n        if (!response.data.results) {\n          setError(true);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getCurrentMovie();\n  }, [id]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>Oops.. Simesing went wrong</p>}\n      {reviews && (\n        <>\n          {reviews.length > 0 ? (\n            <ul>\n              {reviews.map(review => {\n                return (\n                  <li key={review.id}>\n                    <h3>Athor: {review.author}</h3>\n                    <p>{review.content}</p>\n                  </li>\n                );\n              })}\n            </ul>\n          ) : (\n            <p>We don't have any reviews for this movie.</p>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["KEY","moviesApi","axios","baseURL","getMovies","get","params","api_key","response","data","getMoviesById","id","getCastById","getReviewsById","getSearhedMovies","query","useState","reviews","setReviews","isLoading","setIsLoading","error","setError","useParams","useEffect","getCurrentMovie","results","console","log","length","map","review","author","content"],"sourceRoot":""}