{"version":3,"file":"static/js/544.360e3933.chunk.js","mappings":"kTAEMA,EAAM,mCACNC,EAAYC,EAAAA,EAAAA,OAAa,CAC7BC,QAAS,kCAGEC,EAAS,mCAAG,oGACAH,EAAUI,IAAI,mBAAoB,CACvDC,OAAQ,CAAEC,QAASP,KAFE,cACjBQ,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,qDAOTC,EAAa,mCAAG,WAAMC,GAAN,uFACJV,EAAUI,IAAV,gBAAuBM,GAAM,CAClDL,OAAQ,CAAEC,QAASP,KAFM,cACrBQ,EADqB,yBAKpBA,GALoB,2CAAH,sDAQbI,EAAW,mCAAG,WAAMD,GAAN,uFACFV,EAAUI,IAAV,gBAAuBM,EAAvB,YAAqC,CAC1DL,OAAQ,CAAEC,QAASP,KAFI,cACnBQ,EADmB,yBAKlBA,GALkB,2CAAH,sDAQXK,EAAc,mCAAG,WAAMF,GAAN,uFACLV,EAAUI,IAAV,gBAAuBM,EAAvB,YAAqC,CAC1DL,OAAQ,CAAEC,QAASP,KAFO,cACtBQ,EADsB,yBAKrBA,GALqB,2CAAH,sDAQdM,EAAgB,mCAAG,WAAMC,GAAN,uFACPd,EAAUI,IAAI,eAAgB,CACnDC,OAAQ,CAAEC,QAASP,EAAKe,MAAAA,KAFI,cACxBP,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,qD,uFCpChBO,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAMG,KAAI,SAAAC,GACT,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKV,IAAMY,MAAO,CAAEC,KAAMN,GAA/C,SACGG,EAAKI,OAASJ,EAAKK,MAAQL,EAAKM,kBAF5BN,EAAKV,GAMjB,KAGN,C,wHCkBD,UA/Ba,WACX,OAA0BiB,EAAAA,EAAAA,UAAS,IAAnC,eAAOX,EAAP,KAAcY,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,WAAS,GAAnC,eAAOI,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,uGACK/B,EAAAA,EAAAA,MADL,OACZI,EADY,OAEZ4B,EAAS5B,EAAS6B,QACxBR,EAASO,GAETL,GAAa,GACRvB,EAAS6B,SACZJ,GAAS,GAPO,2CAAH,qDAWjBE,GACD,GAAE,KAGD,6BACE,wBAAI,oBAEJ,SAAC,IAAD,CAAUlB,MAAOA,IAChBa,IAAa,SAAC,IAAD,IACbE,IAAS,uBAAG,iCAGlB,C","sources":["API.js","components/FilmList/FilmList.jsx","pages/Home/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '183c3cacc9c38c09c14d38798ccfe9d7';\nconst moviesApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const getMovies = async () => {\n  const response = await moviesApi.get('trending/all/day', {\n    params: { api_key: KEY },\n  });\n  return response.data;\n};\n\nexport const getMoviesById = async id => {\n  const response = await moviesApi.get(`movie/${id}`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getCastById = async id => {\n  const response = await moviesApi.get(`movie/${id}/credits`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getReviewsById = async id => {\n  const response = await moviesApi.get(`movie/${id}/reviews`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getSearhedMovies = async query => {\n  const response = await moviesApi.get('search/movie', {\n    params: { api_key: KEY, query },\n  });\n  return response.data;\n};\n\n//https://api.themoviedb.org/3/search/movie?query=batman\n","import { Link, useLocation } from 'react-router-dom';\n\nexport const FilmList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {films.map(film => {\n        return (\n          <li key={film.id}>\n            <Link to={`/movies/${film.id}`} state={{ from: location }}>\n              {film.title || film.name || film.original_title}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getMovies } from 'API';\nimport { FilmList } from 'components/FilmList/FilmList';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Home = () => {\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const response = await getMovies();\n      const movies = response.results;\n      setFilms(movies);\n\n      setIsLoading(false);\n      if (!response.results) {\n        setError(true);\n      }\n    };\n\n    fetchMovies();\n  }, []);\n\n  return (\n    <main>\n      <h1>Trending today</h1>\n\n      <FilmList films={films}></FilmList>\n      {isLoading && <Loader />}\n      {error && <p>Oops.. Simesing went wrong</p>}\n    </main>\n  );\n};\n\nexport default Home;\n"],"names":["KEY","moviesApi","axios","baseURL","getMovies","get","params","api_key","response","data","getMoviesById","id","getCastById","getReviewsById","getSearhedMovies","query","FilmList","films","location","useLocation","map","film","to","state","from","title","name","original_title","useState","setFilms","isLoading","setIsLoading","error","setError","useEffect","fetchMovies","movies","results"],"sourceRoot":""}